reportes.jsx prueba
npm install recharts

import React, { useEffect, useState } from 'react';
import {
  Box, Typography, Button, Stack, Grid, Card, CardContent, Divider
} from '@mui/material';
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer
} from 'recharts';

const Reportes = () => {
  const [usuario, setUsuario] = useState(null);
  const [reportes, setReportes] = useState([]);
  const [temaSeleccionado, setTemaSeleccionado] = useState(null);
  const temas = ['matematica', 'verbal', 'ciencias', 'historia'];

  // Cargar usuario desde localStorage al montar el componente
  useEffect(() => {
    const datos = JSON.parse(localStorage.getItem('usuario'));
    setUsuario(datos);
  }, []);

  // Cargar reportes cuando el usuario esté disponible
  useEffect(() => {
    if (usuario?.id) {
      fetch(`http://localhost:3000/api/reportes/${usuario.id}`)
        .then(res => res.json())
        .then(data => setReportes(data.reportes || []))
        .catch(err => console.error('Error al cargar reportes:', err));
    }
  }, [usuario]);

  // Filtrado por tema
  const reportesFiltrados = temaSeleccionado
    ? reportes.filter(r => r.tema.toLowerCase() === temaSeleccionado)
    : reportes;

  // Estadísticas generales
  const totalSimulacros = reportes.length;
  const totalCorrectas = reportes.reduce((sum, r) => sum + r.correctas, 0);
  const totalPreguntas = reportes.reduce((sum, r) => sum + r.total, 0);
  const porcentajeGlobal = totalPreguntas > 0 ? ((totalCorrectas / totalPreguntas) * 100).toFixed(1) : 0;
  const ultimaFecha = reportes.length > 0 ? new Date(Math.max(...reportes.map(r => new Date(r.fecha)))).toLocaleString() : '---';

  // Estadísticas por tema
  const estadisticasPorTema = temas.map(tema => {
    const reportesTema = reportes.filter(r => r.tema === tema);
    const totalC = reportesTema.reduce((sum, r) => sum + r.correctas, 0);
    const totalT = reportesTema.reduce((sum, r) => sum + r.total, 0);
    return {
      tema,
      intentos: reportesTema.length,
      promedio: reportesTema.length > 0 ? (totalC / reportesTema.length).toFixed(2) : 0,
      porcentaje: totalT > 0 ? ((totalC / totalT) * 100).toFixed(1) : 0,
    };
  });

  // Datos para gráfico (por examen)
  const datosGrafico = [...reportes]
    .sort((a, b) => new Date(a.fecha) - new Date(b.fecha))
    .map((r, index) => ({
      examen: `Intento ${index + 1}`,
      aciertos: r.correctas,
    }));

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: '#F9F6FF', px: 6, py: 8 }}>
      <Typography variant="h4" align="center" gutterBottom fontWeight="bold">
        Historial de Reportes
      </Typography>

      {/* Resumen General */}
      <Card sx={{ mb: 4 }} elevation={2}>
        <CardContent>
          <Typography variant="h6" gutterBottom>Resumen General</Typography>
          <Typography variant="body2">Total de simulacros: {totalSimulacros}</Typography>
          <Typography variant="body2">Porcentaje global de aciertos: {porcentajeGlobal}%</Typography>
          <Typography variant="body2">Último intento: {ultimaFecha}</Typography>
        </CardContent>
      </Card>

      {/* Estadísticas por Tema */}
      <Grid container spacing={2} sx={{ mb: 4 }}>
        {estadisticasPorTema.map((e, i) => (
          <Grid item xs={12} sm={6} md={3} key={i}>
            <Card elevation={1}>
              <CardContent>
                <Typography variant="subtitle1" fontWeight="bold">
                  {e.tema.toUpperCase()}
                </Typography>
                <Typography variant="body2">Intentos: {e.intentos}</Typography>
                <Typography variant="body2">Promedio aciertos: {e.promedio}</Typography>
                <Typography variant="body2">Porcentaje: {e.porcentaje}%</Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      {/* Gráfico de evolución por examen */}
      <Card sx={{ mb: 4 }} elevation={2}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Evolución de aciertos por intento
          </Typography>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={datosGrafico}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="examen" />
              <YAxis allowDecimals={false} />
              <Tooltip />
              <Line type="monotone" dataKey="aciertos" stroke="#1976d2" />
            </LineChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      {/* Filtros por tema */}
      <Stack spacing={2} direction="row" justifyContent="center" flexWrap="wrap" sx={{ mb: 4 }}>
        <Button
          variant={temaSeleccionado === null ? "contained" : "outlined"}
          onClick={() => setTemaSeleccionado(null)}
        >
          TODOS
        </Button>
        {temas.map((tema) => (
          <Button
            key={tema}
            variant={temaSeleccionado === tema ? "contained" : "outlined"}
            onClick={() => setTemaSeleccionado(tema)}
          >
            REPORTE DE {tema.toUpperCase()}
          </Button>
        ))}
      </Stack>

      {/* Lista de reportes */}
      {reportesFiltrados.length === 0 ? (
        <Typography align="center" color="text.secondary">
          No hay reportes para este tema.
        </Typography>
      ) : (
        <Grid container spacing={3} justifyContent="center">
          {reportesFiltrados.map((r, index) => (
            <Grid item xs={12} sm={6} md={4} key={index}>
              <Card elevation={3}>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    {r.tema.charAt(0).toUpperCase() + r.tema.slice(1)}: {r.correctas}/{r.total}
                  </Typography>
                  <Divider sx={{ my: 1 }} />
                  <Typography variant="body2" color="text.secondary">
                    Fecha: {new Date(r.fecha).toLocaleString()}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}
    </Box>
  );
};

export default Reportes;
