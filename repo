&&npm install recharts jspdf jspdf-autotable
import React, { useEffect, useState } from 'react';
import {
  Box, Typography, Button, Stack, Grid, Card, CardContent, Divider
} from '@mui/material';
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer
} from 'recharts';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

const Reportes = () => {
  const [usuario, setUsuario] = useState(null);
  const [reportes, setReportes] = useState([]);
  const [temaSeleccionado, setTemaSeleccionado] = useState(null);
  const temas = ['matematica', 'verbal', 'ciencias', 'historia'];

  useEffect(() => {
    const datos = JSON.parse(localStorage.getItem('usuario'));
    setUsuario(datos);
  }, []);

  useEffect(() => {
    if (usuario?.id) {
      fetch(`http://localhost:3000/api/reportes/${usuario.id}`)
        .then(res => res.json())
        .then(data => setReportes(data.reportes || []))
        .catch(err => console.error('Error al cargar reportes:', err));
    }
  }, [usuario]);

  const reportesFiltrados = temaSeleccionado
    ? reportes.filter(r => r.tema.toLowerCase() === temaSeleccionado)
    : reportes;

  const totalSimulacros = reportes.length;
  const totalCorrectas = reportes.reduce((sum, r) => sum + r.correctas, 0);
  const totalPreguntas = reportes.reduce((sum, r) => sum + r.total, 0);
  const porcentajeGlobal = totalPreguntas > 0
    ? ((totalCorrectas / totalPreguntas) * 100).toFixed(1)
    : 0;
  const ultimaFecha = reportes.length > 0
    ? new Date(Math.max(...reportes.map(r => new Date(r.fecha)))).toLocaleString()
    : '---';

  const estadisticasPorTema = temas.map(tema => {
    const reportesTema = reportes.filter(r => r.tema === tema);
    const totalC = reportesTema.reduce((sum, r) => sum + r.correctas, 0);
    const totalT = reportesTema.reduce((sum, r) => sum + r.total, 0);
    return {
      tema,
      intentos: reportesTema.length,
      promedio: reportesTema.length > 0 ? (totalC / reportesTema.length).toFixed(2) : 0,
      porcentaje: totalT > 0 ? ((totalC / totalT) * 100).toFixed(1) : 0,
    };
  });

  const datosGrafico = [...reportesFiltrados]
    .sort((a, b) => new Date(a.fecha) - new Date(b.fecha))
    .map((r, index) => ({
      examen: `Intento ${index + 1}`,
      aciertos: r.correctas,
    }));

    const generarPDF = async () => {
      const doc = new jsPDF();
      const logoUrl = "/img/cuni.png";
    
      // Cargar logo como base64
      const getImageBase64 = (url) =>
        fetch(url)
          .then(res => res.blob())
          .then(blob => new Promise((resolve) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.readAsDataURL(blob);
          }));
    
      const logoBase64 = await getImageBase64(logoUrl);
    
      // Encabezado con logo y t칤tulo
      doc.addImage(logoBase64, 'PNG', 10, 10, 25, 25);
      doc.setFontSize(16);
      doc.text("Reporte de Simulacros", 40, 20);
      doc.setFontSize(10);
      doc.text(`Fecha de generaci칩n: ${new Date().toLocaleString()}`, 40, 32);
    
      // Informaci칩n del usuario
      let y = 45;
      doc.setFontSize(12);
      doc.text(`Usuario: ${usuario?.nombre || 'N/A'}`, 14, y); y += 8;
      doc.text(`Total de simulacros: ${totalSimulacros}`, 14, y); y += 8;
      doc.text(`Porcentaje global de aciertos: ${porcentajeGlobal}%`, 14, y); y += 8;
      doc.text(`칔ltimo intento: ${ultimaFecha}`, 14, y); y += 6;
    
      // Tabla: Estad칤sticas por tema
      autoTable(doc, {
        startY: y + 4,
        head: [['Tema', 'Intentos', 'Prom. Aciertos', 'Porcentaje']],
        body: estadisticasPorTema.map(e => [
          e.tema.toUpperCase(),
          e.intentos,
          e.promedio,
          `${e.porcentaje}%`
        ]),
        theme: 'striped',
        styles: { fontSize: 10, halign: 'center' },
        headStyles: { fillColor: [22, 160, 133] }
      });
    
      // Tabla: Historial detallado
      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 10,
        head: [['Tema', 'Respuestas Correctas', 'Total Preguntas', 'Fecha', 'Hora']],
        body: reportesFiltrados.map(r => [
          r.tema,
          r.correctas,
          r.total,
          new Date(r.fecha).toLocaleDateString(),
          new Date(r.fecha).toLocaleTimeString()
        ]),
        theme: 'grid',
        styles: { fontSize: 10 },
        headStyles: { fillColor: [52, 152, 219] }
      });
    
      // Recomendaciones autom치ticas
      const recomendaciones = estadisticasPorTema
        .filter(t => Number(t.porcentaje) < 70)
        .map(t => `- Reforzar el tema de ${t.tema.toUpperCase()} (${t.porcentaje}%)`);
    
      if (recomendaciones.length === 0) {
        recomendaciones.push("- El rendimiento es adecuado en todos los temas evaluados.");
      }
    
      let ry = doc.lastAutoTable.finalY + 10;
      doc.setFontSize(12);
      doc.text("Recomendaciones del sistema:", 14, ry); ry += 6;
      doc.setFontSize(10);
      recomendaciones.forEach(r => {
        doc.text(r, 18, ry);
        ry += 6;
      });
    
      doc.save(`reporte_${usuario?.nombre || 'usuario'}.pdf`);
    };
    

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: '#F9F6FF', px: 6, py: 8 }}>
      <Typography variant="h4" align="center" gutterBottom fontWeight="bold">
        Historial de Reportes
      </Typography>

      <Card sx={{ mb: 4 }} elevation={2}>
        <CardContent>
          <Typography variant="h6" gutterBottom>Resumen General</Typography>
          <Typography variant="body2">Total de simulacros: {totalSimulacros}</Typography>
          <Typography variant="body2">Porcentaje global de aciertos: {porcentajeGlobal}%</Typography>
          <Typography variant="body2">칔ltimo intento: {ultimaFecha}</Typography>
        </CardContent>
      </Card>

      <Grid container spacing={2} sx={{ mb: 4 }}>
        {estadisticasPorTema.map((e, i) => (
          <Grid item xs={12} sm={6} md={3} key={i}>
            <Card elevation={1}>
              <CardContent>
                <Typography variant="subtitle1" fontWeight="bold">
                  {e.tema.toUpperCase()}
                </Typography>
                <Typography variant="body2">Intentos: {e.intentos}</Typography>
                <Typography variant="body2">Promedio aciertos: {e.promedio}</Typography>
                <Typography variant="body2">Porcentaje: {e.porcentaje}%</Typography>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>

      <Card sx={{ mb: 4 }} elevation={2}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Evoluci칩n de aciertos {temaSeleccionado ? `(${temaSeleccionado})` : ''}
          </Typography>
          {datosGrafico.length === 0 ? (
            <Typography variant="body2" color="text.secondary">
              No hay datos para mostrar en el gr치fico.
            </Typography>
          ) : (
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={datosGrafico}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="examen" />
                <YAxis allowDecimals={false} />
                <Tooltip />
                <Line type="monotone" dataKey="aciertos" stroke="#1976d2" />
              </LineChart>
            </ResponsiveContainer>
          )}
        </CardContent>
      </Card>

      <Stack spacing={2} direction="row" justifyContent="center" flexWrap="wrap" sx={{ mb: 2 }}>
        <Button
          variant={temaSeleccionado === null ? "contained" : "outlined"}
          onClick={() => setTemaSeleccionado(null)}
        >
          TODOS
        </Button>
        {temas.map((tema) => (
          <Button
            key={tema}
            variant={temaSeleccionado === tema ? "contained" : "outlined"}
            onClick={() => setTemaSeleccionado(tema)}
          >
            REPORTE DE {tema.toUpperCase()}
          </Button>
        ))}
        <Button variant="outlined" color="secondary" onClick={generarPDF}>
          Descargar PDF
        </Button>
      </Stack>

      <Typography variant="h6" gutterBottom>
        游늶 Historial de Ex치menes {temaSeleccionado ? `(${temaSeleccionado})` : ''}
      </Typography>

      {reportesFiltrados.length === 0 ? (
        <Typography align="center" color="text.secondary">
          No hay reportes para este tema.
        </Typography>
      ) : (
        <Grid container spacing={3} justifyContent="center">
          {reportesFiltrados.map((r, index) => (
            <Grid item xs={12} sm={6} md={4} key={index}>
              <Card elevation={3}>
                <CardContent>
                  <Typography variant="subtitle1" fontWeight="bold">
                    Tema: {r.tema.charAt(0).toUpperCase() + r.tema.slice(1)}
                  </Typography>
                  <Typography variant="body2">
                    Resultado: {r.correctas} correctas de {r.total}
                  </Typography>
                  <Typography variant="body2">
                    Fecha: {new Date(r.fecha).toLocaleDateString()}
                  </Typography>
                  <Typography variant="body2">
                    Hora: {new Date(r.fecha).toLocaleTimeString()}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}
    </Box>
  );
};

export default Reportes;
